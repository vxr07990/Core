<?php
/*+**********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 ************************************************************************************/

include_once 'modules/Vtiger/CRMEntity.php';

//@TODO: This is broken just broken
class DetailLineItems extends Vtiger_CRMEntity
{
    public $table_name = 'vtiger_detaillineitems';
    public $table_index= 'detaillineitemsid';

    /**
     * Mandatory table for supporting custom fields.
     */
    public $customFieldTable = array('vtiger_detaillineitemscf', 'detaillineitemsid');

    /**
     * Mandatory for Saving, Include tables related to this module.
     */
    //var $tab_name = Array('vtiger_crmentity', 'vtiger_detaillineitems', 'vtiger_detaillineitemscf');
    public $tab_name = array('vtiger_detaillineitems', 'vtiger_detaillineitemscf');

    /**
     * Mandatory for Saving, Include tablename and tablekey columnname here.
     */
    public $tab_name_index = array(
        //'vtiger_crmentity' => 'crmid',
        'vtiger_detaillineitems' => 'detaillineitemsid',
        'vtiger_detaillineitemscf'=>'detaillineitemsid');

    /**
     * Mandatory for Listing (Related listview)
     */
    public $list_fields = array(
        /* Format: Field Label => Array(tablename, columnname) */
        // tablename should not have prefix 'vtiger_'
        'Description' => array('detaillineitems', 'dli_description'),
        //'Assigned To' => Array('crmentity','smownerid')
        'Assigned To' => array('detailineitems', 'smownerid')
    );
    public $list_fields_name = array(
        /* Format: Field Label => fieldname */
        'Description' => 'dli_description',
        'Assigned To' => 'assigned_user_id',
    );

    // Make the field link to detail view
    public $list_link_field = 'dli_description';

    // For Popup listview and UI type support
    public $search_fields = array(
        /* Format: Field Label => Array(tablename, columnname) */
        // tablename should not have prefix 'vtiger_'
        '<entityfieldlabel>' => array('detaillineitems', 'dli_description'),
        //'Assigned To' => Array('vtiger_crmentity','assigned_user_id'),
        'Assigned To' => array('detaillineitems','assigned_user_id'),
    );
    public $search_fields_name = array(
        /* Format: Field Label => fieldname */
        'Description' => 'dli_description',
        'Assigned To' => 'assigned_user_id',
    );

    // For Popup window record selection
    public $popup_fields = array('dli_description');

    // For Alphabetical search
    public $def_basicsearch_col = 'dli_description';

    // Column value to use on detail view record text display
    public $def_detailview_recname = 'dli_description';

    // Used when enabling/disabling the mandatory fields for the module.
    // Refers to vtiger_field.fieldname values.
    public $mandatory_fields = array('dli_description','assigned_user_id');

    public $default_order_by = 'dli_description';
    public $default_sort_order='ASC';

    public function __construct($estimateId = false)
    {
        parent::__construct();
        $this->estimateID = $estimateId;
        $this->pseudo = session_id() . '_';
    }
    
    /**
     * Invoked when special actions are performed on the module.
     * @param String Module name
     * @param String Event Type
     */
    public function vtlib_handler($moduleName, $eventType)
    {
        global $adb;
        if ($eventType == 'module.postinstall') {
            // TODO Handle actions after this module is installed.
        } elseif ($eventType == 'module.disabled') {
            // TODO Handle actions before this module is being uninstalled.
        } elseif ($eventType == 'module.preuninstall') {
            // TODO Handle actions when this module is about to be deleted.
        } elseif ($eventType == 'module.preupdate') {
            // TODO Handle actions before this module is updated.
        } elseif ($eventType == 'module.postupdate') {
            // TODO Handle actions after this module is updated.
        }
    }

    /*
    function saveentity($module, $fileid = '') {
        if ($module != 'DetailLineItems') {
            parent::saveentity($module, $fileid); // TODO: Change the autogenerated stub
        } else {
        }
    }
    */

    public function mark_deleted($id)
    {
        if ($id) {
            foreach ($this->tab_name as $table_name) {
                $stmt = 'DELETE FROM `'.$table_name.'` WHERE `dli_relcrmid` = ?';
                $this->db->pquery($stmt, [$id]);
            }
        }
    }

    //override this so saveentity can call us.
    public function insertIntoEntityTable($table_name, $module, $fileid = '', $pseudo = false)
    {
        global $app_strings;
        if ($module != 'DetailLineItems') {
            parent::insertIntoEntityTable($table_name, $module, $fileid, $pseudo); // TODO: Change the autogenerated stub
            //Here we are going to apply the crmEntity stuff.
            //need $this->id set.  from last insert?
        } else {
            foreach ($this->tab_name as $origTableName) {
                $table_name = $pseudo?$this->pseudo.$origTableName:$origTableName;
                $exists = false;
                $checkSql = 'SELECT * FROM `' . $table_name . '` WHERE `detaillineitemsid` = ? LIMIT 1';
                $res = $this->db->pquery($checkSql, [$this->id]);
                //remember better way to do this.
                if (method_exists($res, 'fetchRow')) {
                    $row = $res->fetchRow();
                    if ($row['detaillineitemsid']) {
                        $exists = true;
                    }
                }
                
                if (!$exists) {
                    $this->insertIntoCrmEntity($module, $fileid, $pseudo);
                }
                
                //somewhere is this thing.
                $fieldSql = 'SELECT * FROM `vtiger_field` WHERE `tabid` = ? AND `tablename` = ?';
                $tabid = getTabid($module);
                $index_name = $this->tab_name_index[$table_name];
                $res = $this->db->pquery($fieldSql, [$tabid, $origTableName]);
                $updateSql = '';
                $params = [];
                if (method_exists($res, 'fetchRow')) {
                    while ($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {
                        $uitype = $row['uitype'];
                        $fieldName = $row['fieldname'];
                        $columnName = $row['columnname'];
                        if ($fieldName == 'detaillineitemsid') {
                            continue;
                        }
                        //handle uitype replacements why isn't this a core function?
                        if ($uitype == 7) {
                            //strip out the spaces and commas in numbers if given ie., in amounts there may be ,
                            $fldvalue = str_replace(",", "", $this->column_fields[$fieldName]); //trim($this->column_fields[$fieldName],",");
                        } elseif ($uitype == 15 || $uitype == 16) {
                            if ($this->column_fields[$fieldName] == $app_strings['LBL_NOT_ACCESSIBLE']) {
                                //If the value in the request is Not Accessible for a picklist, the existing value will be replaced instead of Not Accessible value.
                                $sql      = "select $columnName from  $table_name where ".$index_name."=?";
                                $res      = $this->db->pquery($sql, [$this->id]);
                                $pick_val = $this->db->query_result($res, 0, $columnName);
                                $fldvalue = $pick_val;
                            } else {
                                $fldvalue = $this->column_fields[$fieldName];
                            }
                        } elseif ($uitype == 56) {
                            if (\MoveCrm\InputUtils::CheckboxToBool($this->column_fields[$fieldName])) {
                                $fldvalue = '1';
                            } else {
                                $fldvalue = '0';
                            }
                        } elseif ($uitype == 71) {
                            $fldvalue = CurrencyField::convertToDBFormat($this->column_fields[$fieldName]);
                        } else {
                            $fldvalue = $this->column_fields[$fieldName];
                        }
                        
                        if ($fldvalue && $fieldName) {
                            $updateSql .= ($updateSql?',':'') . ' `' . $columnName . '` = ?';
                            $params[] = $fldvalue;
                        }
                    }
                }
                if ($updateSql && count($params) > 0) {
                    $updateSql = 'UPDATE `'.$table_name.'` SET '. $updateSql . ' WHERE `detaillineitemsid` = ?';
                    $params[] = $this->id;
                    $this->db->pquery($updateSql, $params);
                }
            }
        }
    }

    public function insertIntoCrmEntity($module, $fileid = '', $pseudo = false)
    {
        global $current_user;
        $db = PearDatabase::getInstance();

        if ($module != 'DetailLineItems') {
            //we're actually going to override this function.
            parent::insertIntoCrmEntity($module, $fileid, $pseudo);
        } else {
            //Don't insert into vtiger_crmentity.  Instead let's setup the values to THIS and use them later in saveentity.
            //wrong. instead INSERT a value into the tables as a place holder return the insert id to be overwritten in insertIntoEntityTable

            $table_name = $pseudo?$this->pseudo.'vtiger_detaillineitems':'vtiger_detaillineitems';
            
            if ($fileid != '') {
                $this->id   = $fileid;
                $this->mode = 'edit';
            }

            $date_var = date("Y-m-d H:i:s");
            $ownerid = $this->column_fields['assigned_user_id'];
            //$agentId = $this->column_fields['agentid'];
            //$tabid = getTabid($module);
            //$description_val = from_html($this->column_fields['description'], true);

            //Gotta get it together.
            if ($this->mode == 'edit' && $this->id) {
                //means we think it's existent at this point
                //therefore we don't need to do anything except update the time stamp, and perhaps owner etc.
                $sql    = 'UPDATE `' . $table_name . '` SET smownerid=?, modifiedby=?, modifiedtime=? where detaillineitemsid=?';
                $params = [$ownerid, $current_user->id, $db->formatDate($date_var, true), $this->id];
                $db->pquery($sql, $params);
            } else {
                //means we need to "create" it.  So fine we insert into the table and then we can be happy.
                $sql    = 'INSERT INTO `'.$table_name.'` SET smownerid=?, modifiedby=?, createdtime=?, modifiedtime=?';
                $params = [$ownerid, $current_user->id, $db->formatDate($date_var, true), $db->formatDate($date_var, true)];
                $db->pquery($sql, $params);
                $this->id = $db->getLastInsertID();
                /* madness beyond here.
                foreach ($this->tab_name as $table_name) {
                    if ($table_name != "vtiger_crmentity") {
                        $exists = false;
                        if ($this->id) {
                            //I don't know why it would have an id.  this is confusing.
                            //check if it really is a thing.
                            $checkStmt = 'SELECT * FROM `'.$table_name.'` WHERE `'.$this->tab_name_index[$table_name].'` = ? LIMIT 1';
                            $res       = $db->pquery($checkStmt, [$this->id]);
                            if (method_exists($res, 'fetchRow')) {
                                $row = $res->fetchRow();
                                if (!empty($row[$this->tab_name_index[$table_name]])) {
                                    $exists = true;
                                }
                            }
                        }
                        if ($exists) {
                            //update the row
                            $sql    = 'UPDATE `'.$table_name.'` SET smownerid=?,modifiedby=?,description=?, modifiedtime=?, agentid=? where crmid=?';
                            $params = [$ownerid, $current_user->id, $description_val, $db->formatDate($date_var, true), $agentId, $this->id];
                            $db->pquery($sql, $params);
                        } else {
                            //insert the row.
                            $sql    = 'INSERT INTO `'.$table_name.'` SET smownerid=?,modifiedby=?,description=?, modifiedtime=?, agentid=?';
                            $params = [$ownerid, $current_user->id, $description_val, $db->formatDate($date_var, true), $agentId, $this->id];
                            $db->pquery($sql, $params);
                        }
                    }
                }
                */
            }
        }
    }

    public function retrieve_entity_info($record, $module)
    {
        if ($module != 'DetailLineItems') {
            parent::retrieve_entity_info($record, $module); // TODO: Change the autogenerated stub
        } else {
            if ($record) {
                $this->id = $record;
            }
            $this->column_fields['record_module'] = $module;
            $this->column_fields['record_id']     = $this->id;

            foreach ($this->tab_name as $origTableName) {
                //??????
                //$table_name = $pseudo?$this->pseudo.$origTableName:$origTableName;
                $table_name = $origTableName;
                $exists = false;
                $checkSql = 'SELECT * FROM `' . $table_name . '` WHERE `detaillineitemsid` = ? LIMIT 1';
                $res = $this->db->pquery($checkSql, [$this->id]);
                $foundRow = [];
                //remember better way to do this.
                if (method_exists($res, 'fetchRow')) {
                    $foundRow = $res->fetchRow();
                    if ($foundRow['detaillineitemsid']) {
                        $exists = true;
                    }
                }
                if ($exists) {
                    //somewhere is this thing.
                    $fieldSql = 'SELECT * FROM `vtiger_field` WHERE `tabid` = ? AND `tablename` = ?';
                    $tabid = getTabid($module);
                    $res = $this->db->pquery($fieldSql, [$tabid, $origTableName]);
                    if (method_exists($res, 'fetchRow')) {
                        while ($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {
                            $fieldName = $row['fieldname'];
                            $columnName = $row['columnname'];
                            if ($fieldName == 'detaillineitemsid') {
                                continue;
                            }
                            if ($foundRow[$fieldName]) {
                                $this->column_fields[$fieldName] = $foundRow[$columnName];
                            }
                        }
                    }
                }
            }
        }
    }
}
